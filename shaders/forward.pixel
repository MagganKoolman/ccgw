#version 420 core

in vec2 texOut;
out vec4 finalColor;

uniform sampler2D ambientT;
uniform sampler2D diffuseT;
uniform sampler2D specularT;
uniform sampler2D normalT;
uniform sampler2D depthT;

uniform mat4 invViewPerspective;

uniform vec3 cameraPos;

void main (){
	vec3 lightDir = vec3(0, 0, 0) - vec3(0, 15, 0);
	vec3 normal = texture(normalT, texOut).rgb * 2 - 1;
	float depth = texture(depthT, texOut).r;
	vec4 color = texture(ambientT, texOut);
	float spec = texture(specularT, texOut).r;

	vec4 pos = (invViewPerspective * (vec4(texOut.x, texOut.y, depth, 1)*2-1));
	pos /= pos.w;


	vec3 eyeDir = normalize(cameraPos-pos.xyz);
    vec3 vHalfVector = reflect(-lightDir.xyz, normal);

	finalColor = color + vec4(color) * max(dot(normalize(-lightDir - pos.xyz), normal), 0.0) * pow(max(dot(eyeDir,vHalfVector),0.0), spec);
}
